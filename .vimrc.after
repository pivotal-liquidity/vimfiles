" allow Vim to manage multiple buffers effectively
set hidden
" Auto load the file changed by other programs
set autoread

" ignore these files
set wildignore=*.swp,*.bak,*.pyc,*.class

" font size
set guifont=Monaco:h15

" add git branch to status line
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

" remove swap and backup files from working directory
set nobackup
set nowritebackup

" clear white space in the end of lines
autocmd BufWritePre * :%s/\s\+$//e

" autosave when focus is lost
:au FocusLost * :wa

"------------------------------------------------------------------------
"---------------- Custom Mapping ----------------------------------------
"------------------------------------------------------------------------

" map for resizing windows
" http://vim.wikia.com/wiki/Fast_window_resizing_with_plus/minus_keys
if bufwinnr(1)
  map + <C-W>+
  map - <C-W>-
  map ( <C-W><
  map ) <C-W>>
end

" jump between windows
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-h> <C-w>h
map <C-l> <C-w>l

" ZoomWin configuration
map <C-z> <C-w>o

" map F2 to NERDTree
map <F2> :NERDTreeToggle<CR>

" run test for the whole file
map <D-r> :w<CR>\|:exe "!spin push %" <CR><CR>
" run test for specific line with spin push
map <D-R> :w<CR>\|:exe "!spin push %:" . line(".") <CR><CR>

" run all tests
:command! S !spin push spec

" search for the word where the cursor is
map <D-A> :Ack! <C-R><C-W><CR>

" format the entire file
map <D-L> gg=G<CR>''

" open BufferGator bar with open files
map <D-e> :BuffergatorToggle <CR>

command! RenameFile call RenameFile()

function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'))
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        exec ':bd '. old_name
        exec ':e ' . new_name
        redraw!
    endif
endfunction

command! -nargs=+ QFDo call QFDo(<q-args>)

" Function that does the work
function! QFDo(command)
    " Create a dictionary so that we can
    " get the list of buffers rather than the
    " list of lines in buffers (easy way
    " to get unique entries)
    let buffer_numbers = {}
    " For each entry, use the buffer number as
    " a dictionary key (won't get repeats)
    for fixlist_entry in getqflist()
        let buffer_numbers[fixlist_entry['bufnr']] = 1
    endfor
    " Make it into a list as it seems cleaner
    let buffer_number_list = keys(buffer_numbers)

    " For each buffer
    for num in buffer_number_list
        " Select the buffer
        exe 'buffer' num
        " Run the command that's passed as an argument
        exe a:command
        " Save if necessary
        update
    endfor
endfunction
